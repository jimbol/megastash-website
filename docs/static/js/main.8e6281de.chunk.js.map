{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","styled","header","MaxWidth","div","Nav","NavItem","a","Logo","img","Banner","IntroText","h2","ServicesImg","SignUpContainer","SignUpText","h3","InputRow","MainContainer","Card","OneHalf","OneThird","CardTextWrapper","PriceWrapper","Feature","p","CardCopy","CardHeader","CardSuperHeader","CardImg","PricingImg","Content","FullWidthImg","Code","CopyBlock","App","src","alt","href","id","action","method","name","className","target","noValidate","htmlFor","type","placeholder","required","style","position","left","aria-hidden","tabIndex","text","language","showLineNumbers","theme","tomorrowNightBright","wrapLines","borderTopWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e6281de.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { CopyBlock, tomorrowNightBright } from 'react-code-blocks'\n\nconst CONTRAST = '#0b0b3d';\nconst BORDER_COLOR = '#b3b3b3';\nconst SUCCESS = '#00890a';\nconst ALT_BACKGROUND_COLOR = '#f7f7f7';\n\nconst Header = styled.header`\n  background-color: white;\n`;\nconst MaxWidth = styled.div`\n  max-width: 1200px;\n  display: flex;\n  justify-content: space-between;\n  flex-direction: row;\n  margin: 0 auto;\n`;\nconst Nav = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\nconst NavItem = styled.a`\n  color: ${CONTRAST};\n  font-weight: bold;\n  font-size: 16px;\n  padding: 12px;\n`;\nconst Logo = styled.img`\n  width: 80px;\n  padding: 16px;\n`;\nconst Banner = styled.div`\n  background-color: ${CONTRAST};\n  background-image: url(\"background.png\");\n  background-repeat: no-repeat;\n  background-position: center;\n  min-height: 450px;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nconst IntroText = styled.h2`\n  box-sizing: border-box;\n  max-width: 340px;\n  padding: 16px;\n  font-size: 34px;\n  color: white;\n  font-weight: normal;\n  text-align: center;\n  width: 50%;\n\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst ServicesImg = styled.img`\n  max-width: 640px;\n  width: 50%;\n  padding: 16px 0;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst SignUpContainer = styled.div`\n  background-color: ${ALT_BACKGROUND_COLOR};\n  border: 1px solid ${BORDER_COLOR};\n  border-width: 0 0 1px 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst SignUpText = styled.h3`\n  padding: 32px;\n  margin: 0;\n  font-size: 32px;\n  color: white;\n  font-weight: normal;\n  text-align: center;\n  color: ${CONTRAST};\n`;\nconst InputRow = styled.div`\n  display: flex;\n  flex-direction: row;\n  max-width: 460px;\n  width: 100%;\n  padding: 0 8px 38px 8px;\n  box-sizing: border-box;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\nconst MainContainer = styled.div`\n  margin: 32px auto;\n  max-width: 1260px;\n  flex-direction: row;\n  flex-wrap: wrap;\n  display: flex;\n`;\nconst Card = styled.div`\n  padding: 32px;\n  background-color: ${ALT_BACKGROUND_COLOR};\n  border-radius: 8px;\n  display: flex;\n  flex-direction: row;\n  box-sizing: border-box;\n  @media (max-width: 768px) {\n    align-items: center;\n    flex-direction: column;\n  }\n`;\nconst OneHalf = styled.div`\n  width: 50%;\n  box-sizing: border-box;\n  padding: 8px;\n  align-items: center;\n  @media (max-width: 768px) {\n    margin-top: 8px;\n    width: 100%;\n    flex-direction: column;\n  }\n`;\nconst OneThird = styled.div`\n  width: 33%;\n  box-sizing: border-box;\n  padding: 8px;\n  align-items: center;\n  @media (max-width: 768px) {\n    margin-top: 8px;\n    width: 100%;\n    flex-direction: column;\n  }\n`;\nconst CardTextWrapper = styled.div`\n  width: 50%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  @media (max-width: 868px) {\n    text-align: center;\n    width: 100%;\n  }\n`;\nconst PriceWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  text-align: center;\n  align-items: center;\n`;\nconst Feature = styled.p`\n  font-size: 18px;\n  margin: 12px;\n`;\nconst CardCopy = styled.p`\n  color: ${CONTRAST};\n  font-size: 16px;\n  margin: 0;\n`;\nconst CardHeader = styled.h3`\n  color: ${CONTRAST};\n  font-size: 26px;\n  font-weight: bold;\n  margin: 0;\n  padding-bottom: 12px;\n`;\nconst CardSuperHeader = styled.h2`\n  box-sizing: border-box;\n  color: ${CONTRAST};\n  font-size: 32px;\n  font-weight: bold;\n  margin: 0;\n  padding-bottom: 12px;\n`;\n\nconst CardImg = styled.img`\n  width: 40%;\n  padding: 16px;\n  @media (max-width: 768px) {\n    width: 60%;\n  }\n`;\n\nconst PricingImg = styled.img`\n  width: 40%;\n  padding: 16px;\n  background-color: #efefef;\n  border-radius: 60%;\n`;\nconst Content = styled.div`\n  width: 100%;\n  max-width: 900px;\n  padding: 32px 64px;\n  margin: 0 auto;\n  box-sizing: border-box;\n  @media (max-width: 768px) {\n    padding: 12px 16px;\n  }\n`;\nconst FullWidthImg = styled.img`\n  width: 100%;\n  margin: 20px 0 20px 0;\n  border-radius: 8px;\n  border: 1px solid ${BORDER_COLOR};\n`;\nconst Code = styled(CopyBlock)`\n  font-family: monospace;\n`;\n\nfunction App() {\n  return (\n    <div>\n      <Header>\n        <MaxWidth>\n          <Logo src=\"logo.png\" alt=\"Megastash Logo\" />\n          <Nav>\n            <NavItem href=\"#how\">How it works</NavItem>\n            <NavItem href=\"#price\">Pricing</NavItem>\n          </Nav>\n        </MaxWidth>\n      </Header>\n      <Banner>\n        <IntroText>The <strong>back end</strong> to your <strong>front end</strong>, in <strong>minutes</strong>, with <strong>no code</strong></IntroText>\n        <ServicesImg src=\"services.png\" alt=\"Database, Auth, Static resources, and API\" />\n      </Banner>\n      <SignUpContainer>\n        <SignUpText><strong>Get on the waiting list</strong> for early access</SignUpText>\n        <InputRow>\n          <div id=\"mc_embed_signup\">\n            <form action=\"https://mega-stash.us19.list-manage.com/subscribe/post?u=ce439a1b5acd3bfb51c7d4fd2&amp;id=cde18da061\" method=\"post\" id=\"mc-embedded-subscribe-form\" name=\"mc-embedded-subscribe-form\" className=\"validate\" target=\"_blank\" noValidate>\n              <div id=\"mc_embed_signup_scroll\">\n                <label htmlFor=\"mce-EMAIL\"></label>\n                <input type=\"email\" name=\"EMAIL\" className=\"email\" id=\"mce-EMAIL\" placeholder=\"Email\" required />\n                <div style={{\n                  position: 'absolute',\n                  left: -5000,\n                }} aria-hidden=\"true\"><input type=\"text\" name=\"b_ce439a1b5acd3bfb51c7d4fd2_cde18da061\" tabIndex=\"-1\" /></div>\n                <div className=\"clear\"><input type=\"submit\" name=\"subscribe\" id=\"mc-embedded-subscribe\" className=\"button\" /></div>\n              </div>\n            </form>\n          </div>\n        </InputRow>\n      </SignUpContainer>\n      <MainContainer>\n        <OneHalf>\n          <Card>\n            <CardImg\n              src=\"static.png\"\n              alt=\"html, css, jpg, png, etc...\"\n            />\n            <CardTextWrapper>\n              <CardHeader>Easy Deploys</CardHeader>\n              <CardCopy>Push your JS, HTML, and CSS to Github to deploy.</CardCopy>\n            </CardTextWrapper>\n          </Card>\n        </OneHalf>\n        <OneHalf>\n          <Card>\n            <CardImg\n              src=\"api.png\"\n              alt=\"Autogenerated APIs\"\n            />\n\n            <CardTextWrapper>\n              <CardHeader>Dedicated Resources</CardHeader>\n              <CardCopy>Tried and true AWS infrastructure without all the work.</CardCopy>\n            </CardTextWrapper>\n          </Card>\n        </OneHalf>\n        <OneHalf>\n          <Card>\n            <CardImg\n              src=\"auth.png\"\n              alt=\"Authentication and Authorization\"\n            />\n            <CardTextWrapper>\n              <CardHeader>Secure Access</CardHeader>\n              <CardCopy>Quickly set up Authentication and Authorization, SSL Certificates, and User Permissions.</CardCopy>\n            </CardTextWrapper>\n          </Card>\n        </OneHalf>\n        <OneHalf>\n          <Card>\n            <CardImg\n              src=\"database.png\"\n              alt=\"Databases\"\n            />\n            <CardTextWrapper>\n              <CardHeader>Highly Customizable</CardHeader>\n              <CardCopy>Our flexible system allows for a huge variety of use cases.</CardCopy>\n            </CardTextWrapper>\n          </Card>\n        </OneHalf>\n        <Content id=\"how\">\n          <CardSuperHeader>How does it work?</CardSuperHeader>\n          <CardHeader>Create Tables</CardHeader>\n          <CardCopy>First you create your tables to house your app's data and set up permissions. We will automatically generate autoscaling APIs with documentation and TypeScript types for your tables as well as creating a dashboard for monitoring.</CardCopy>\n          <FullWidthImg\n            src=\"db-editor.png\"\n            alt=\"Database editor\"\n            />\n          <br />\n          <br />\n\n          <CardHeader>Quickly Add Authentication</CardHeader>\n          <CardCopy>Add the authentication interface to your React application with our easy-to-use component.</CardCopy>\n          <br />\n          <Code\n            text={`import React, { useState } from 'react';\nimport { Authenticator } from 'mega-stash/auth';\n\nconst App = () => {\n  const [authState, setAuthState] = useState();\n\n  return (\n    <Authenticator\n      onChangeAuthState={setAuthState}\n    >\n      {(authState === 'SIGNED_IN') ? (<Main />) : null}\n    </Authenticator>\n  );\n};\n            `}\n            language={'jsx'}\n            showLineNumbers={false}\n            theme={tomorrowNightBright}\n            wrapLines\n          />\n\n          <br />\n          <br />\n          <CardHeader>Access Your Tables</CardHeader>\n          <CardCopy>Use our front-end libraries to get, put, post, and delete based on permissions you set up.</CardCopy>\n          <br />\n          <Code\n            text={`import { API } from 'mega-stash/api';\n\nasync function () {\n  const results = await API.get(\\`/article/\\${article_id}\\`);\n\n  expect(results).toEqual({\n    data: {\n      articles: [{\n        id: article_id,\n        // and other article data\n      }]\n    },\n  });\n}\n            `}\n            language={'jsx'}\n            showLineNumbers={false}\n            theme={tomorrowNightBright}\n            wrapLines\n          />\n\n        </Content>\n        <Content id=\"price\">\n          <CardSuperHeader>Pricing</CardSuperHeader>\n        </Content>\n        <OneThird>\n          <Card>\n            <PriceWrapper>\n              <CardSuperHeader>Indie</CardSuperHeader>\n              <PricingImg\n                src=\"indie.png\"\n                alt=\"Indie Developer\"\n              />\n              <Feature><strong>5,000</strong> Requests</Feature>\n              <Feature><strong>1,000</strong> Users</Feature>\n              <Feature><strong>2</strong> Administrators</Feature>\n              <br />\n              <CardHeader>$6/month</CardHeader>\n            </PriceWrapper>\n          </Card>\n        </OneThird>\n        <OneThird>\n          <Card>\n            <PriceWrapper>\n              <CardSuperHeader>Small Team</CardSuperHeader>\n              <PricingImg\n                src=\"small-team.png\"\n                alt=\"Small teams\"\n              />\n              <Feature><strong>100,000</strong> Requests</Feature>\n              <Feature><strong>10,000</strong> Users</Feature>\n              <Feature><strong>8</strong> Administrators</Feature>\n              <br />\n              <CardHeader>$32/month</CardHeader>\n            </PriceWrapper>\n          </Card>\n        </OneThird>\n        <OneThird>\n          <Card>\n            <PriceWrapper>\n              <CardSuperHeader>Growth Team</CardSuperHeader>\n              <PricingImg\n                src=\"growth.png\"\n                alt=\"Growth teams\"\n              />\n              <Feature><strong>1,000,000</strong> Requests</Feature>\n              <Feature><strong>100,000</strong> Users</Feature>\n              <Feature><strong>∞</strong> Administrators</Feature>\n              <br />\n              <CardHeader>$54/month</CardHeader>\n            </PriceWrapper>\n          </Card>\n        </OneThird>\n      </MainContainer>\n      <SignUpContainer style={{ borderTopWidth: 1 }}>\n        <SignUpText>Get on the waiting list <strong>today!</strong></SignUpText>\n        <InputRow>\n          <div id=\"mc_embed_signup\">\n            <form action=\"https://mega-stash.us19.list-manage.com/subscribe/post?u=ce439a1b5acd3bfb51c7d4fd2&amp;id=cde18da061\" method=\"post\" id=\"mc-embedded-subscribe-form\" name=\"mc-embedded-subscribe-form\" className=\"validate\" target=\"_blank\" noValidate>\n              <div id=\"mc_embed_signup_scroll\">\n                <label htmlFor=\"mce-EMAIL\"></label>\n                <input type=\"email\" name=\"EMAIL\" className=\"email\" id=\"mce-EMAIL\" placeholder=\"Email\" required />\n                <div style={{\n                  position: 'absolute',\n                  left: -5000,\n                }} aria-hidden=\"true\"><input type=\"text\" name=\"b_ce439a1b5acd3bfb51c7d4fd2_cde18da061\" tabIndex=\"-1\" /></div>\n                <div className=\"clear\"><input type=\"submit\" name=\"subscribe\" id=\"mc-embedded-subscribe\" className=\"button\" /></div>\n              </div>\n            </form>\n          </div>\n        </InputRow>\n        <strong>Made with love in Ann Arbor, MI, U.S.A. </strong>\n        <br />\n        © 2020 Brooklet LLC\n        <br />\n        <br />\n        <br />\n      </SignUpContainer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}